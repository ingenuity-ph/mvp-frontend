/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SamplePageImport } from './routes/sample-page'
import { Route as PreviewImport } from './routes/preview'
import { Route as LogoutImport } from './routes/logout'
import { Route as unauthenticatedRouteImport } from './routes/(unauthenticated)/route'
import { Route as IndexImport } from './routes/index'
import { Route as unauthenticatedResetPasswordImport } from './routes/(unauthenticated)/reset-password'
import { Route as unauthenticatedRegisterImport } from './routes/(unauthenticated)/register'
import { Route as unauthenticatedLoginImport } from './routes/(unauthenticated)/login'
import { Route as unauthenticatedConfirmAccountImport } from './routes/(unauthenticated)/confirm-account'
import { Route as authenticatedHomeImport } from './routes/(authenticated)/home'

// Create/Update Routes

const SamplePageRoute = SamplePageImport.update({
  id: '/sample-page',
  path: '/sample-page',
  getParentRoute: () => rootRoute,
} as any)

const PreviewRoute = PreviewImport.update({
  id: '/preview',
  path: '/preview',
  getParentRoute: () => rootRoute,
} as any)

const LogoutRoute = LogoutImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRoute,
} as any)

const unauthenticatedRouteRoute = unauthenticatedRouteImport.update({
  id: '/(unauthenticated)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const unauthenticatedResetPasswordRoute =
  unauthenticatedResetPasswordImport.update({
    id: '/reset-password',
    path: '/reset-password',
    getParentRoute: () => unauthenticatedRouteRoute,
  } as any)

const unauthenticatedRegisterRoute = unauthenticatedRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => unauthenticatedRouteRoute,
} as any)

const unauthenticatedLoginRoute = unauthenticatedLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => unauthenticatedRouteRoute,
} as any)

const unauthenticatedConfirmAccountRoute =
  unauthenticatedConfirmAccountImport.update({
    id: '/confirm-account',
    path: '/confirm-account',
    getParentRoute: () => unauthenticatedRouteRoute,
  } as any)

const authenticatedHomeRoute = authenticatedHomeImport.update({
  id: '/(authenticated)/home',
  path: '/home',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(unauthenticated)': {
      id: '/(unauthenticated)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof unauthenticatedRouteImport
      parentRoute: typeof rootRoute
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutImport
      parentRoute: typeof rootRoute
    }
    '/preview': {
      id: '/preview'
      path: '/preview'
      fullPath: '/preview'
      preLoaderRoute: typeof PreviewImport
      parentRoute: typeof rootRoute
    }
    '/sample-page': {
      id: '/sample-page'
      path: '/sample-page'
      fullPath: '/sample-page'
      preLoaderRoute: typeof SamplePageImport
      parentRoute: typeof rootRoute
    }
    '/(authenticated)/home': {
      id: '/(authenticated)/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof authenticatedHomeImport
      parentRoute: typeof rootRoute
    }
    '/(unauthenticated)/confirm-account': {
      id: '/(unauthenticated)/confirm-account'
      path: '/confirm-account'
      fullPath: '/confirm-account'
      preLoaderRoute: typeof unauthenticatedConfirmAccountImport
      parentRoute: typeof unauthenticatedRouteImport
    }
    '/(unauthenticated)/login': {
      id: '/(unauthenticated)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof unauthenticatedLoginImport
      parentRoute: typeof unauthenticatedRouteImport
    }
    '/(unauthenticated)/register': {
      id: '/(unauthenticated)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof unauthenticatedRegisterImport
      parentRoute: typeof unauthenticatedRouteImport
    }
    '/(unauthenticated)/reset-password': {
      id: '/(unauthenticated)/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof unauthenticatedResetPasswordImport
      parentRoute: typeof unauthenticatedRouteImport
    }
  }
}

// Create and export the route tree

interface unauthenticatedRouteRouteChildren {
  unauthenticatedConfirmAccountRoute: typeof unauthenticatedConfirmAccountRoute
  unauthenticatedLoginRoute: typeof unauthenticatedLoginRoute
  unauthenticatedRegisterRoute: typeof unauthenticatedRegisterRoute
  unauthenticatedResetPasswordRoute: typeof unauthenticatedResetPasswordRoute
}

const unauthenticatedRouteRouteChildren: unauthenticatedRouteRouteChildren = {
  unauthenticatedConfirmAccountRoute: unauthenticatedConfirmAccountRoute,
  unauthenticatedLoginRoute: unauthenticatedLoginRoute,
  unauthenticatedRegisterRoute: unauthenticatedRegisterRoute,
  unauthenticatedResetPasswordRoute: unauthenticatedResetPasswordRoute,
}

const unauthenticatedRouteRouteWithChildren =
  unauthenticatedRouteRoute._addFileChildren(unauthenticatedRouteRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof unauthenticatedRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/preview': typeof PreviewRoute
  '/sample-page': typeof SamplePageRoute
  '/home': typeof authenticatedHomeRoute
  '/confirm-account': typeof unauthenticatedConfirmAccountRoute
  '/login': typeof unauthenticatedLoginRoute
  '/register': typeof unauthenticatedRegisterRoute
  '/reset-password': typeof unauthenticatedResetPasswordRoute
}

export interface FileRoutesByTo {
  '/': typeof unauthenticatedRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/preview': typeof PreviewRoute
  '/sample-page': typeof SamplePageRoute
  '/home': typeof authenticatedHomeRoute
  '/confirm-account': typeof unauthenticatedConfirmAccountRoute
  '/login': typeof unauthenticatedLoginRoute
  '/register': typeof unauthenticatedRegisterRoute
  '/reset-password': typeof unauthenticatedResetPasswordRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(unauthenticated)': typeof unauthenticatedRouteRouteWithChildren
  '/logout': typeof LogoutRoute
  '/preview': typeof PreviewRoute
  '/sample-page': typeof SamplePageRoute
  '/(authenticated)/home': typeof authenticatedHomeRoute
  '/(unauthenticated)/confirm-account': typeof unauthenticatedConfirmAccountRoute
  '/(unauthenticated)/login': typeof unauthenticatedLoginRoute
  '/(unauthenticated)/register': typeof unauthenticatedRegisterRoute
  '/(unauthenticated)/reset-password': typeof unauthenticatedResetPasswordRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/logout'
    | '/preview'
    | '/sample-page'
    | '/home'
    | '/confirm-account'
    | '/login'
    | '/register'
    | '/reset-password'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/logout'
    | '/preview'
    | '/sample-page'
    | '/home'
    | '/confirm-account'
    | '/login'
    | '/register'
    | '/reset-password'
  id:
    | '__root__'
    | '/'
    | '/(unauthenticated)'
    | '/logout'
    | '/preview'
    | '/sample-page'
    | '/(authenticated)/home'
    | '/(unauthenticated)/confirm-account'
    | '/(unauthenticated)/login'
    | '/(unauthenticated)/register'
    | '/(unauthenticated)/reset-password'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  unauthenticatedRouteRoute: typeof unauthenticatedRouteRouteWithChildren
  LogoutRoute: typeof LogoutRoute
  PreviewRoute: typeof PreviewRoute
  SamplePageRoute: typeof SamplePageRoute
  authenticatedHomeRoute: typeof authenticatedHomeRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  unauthenticatedRouteRoute: unauthenticatedRouteRouteWithChildren,
  LogoutRoute: LogoutRoute,
  PreviewRoute: PreviewRoute,
  SamplePageRoute: SamplePageRoute,
  authenticatedHomeRoute: authenticatedHomeRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(unauthenticated)",
        "/logout",
        "/preview",
        "/sample-page",
        "/(authenticated)/home"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(unauthenticated)": {
      "filePath": "(unauthenticated)/route.tsx",
      "children": [
        "/(unauthenticated)/confirm-account",
        "/(unauthenticated)/login",
        "/(unauthenticated)/register",
        "/(unauthenticated)/reset-password"
      ]
    },
    "/logout": {
      "filePath": "logout.tsx"
    },
    "/preview": {
      "filePath": "preview.tsx"
    },
    "/sample-page": {
      "filePath": "sample-page.tsx"
    },
    "/(authenticated)/home": {
      "filePath": "(authenticated)/home.tsx"
    },
    "/(unauthenticated)/confirm-account": {
      "filePath": "(unauthenticated)/confirm-account.tsx",
      "parent": "/(unauthenticated)"
    },
    "/(unauthenticated)/login": {
      "filePath": "(unauthenticated)/login.tsx",
      "parent": "/(unauthenticated)"
    },
    "/(unauthenticated)/register": {
      "filePath": "(unauthenticated)/register.tsx",
      "parent": "/(unauthenticated)"
    },
    "/(unauthenticated)/reset-password": {
      "filePath": "(unauthenticated)/reset-password.tsx",
      "parent": "/(unauthenticated)"
    }
  }
}
ROUTE_MANIFEST_END */
